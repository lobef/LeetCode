package com.leetcode.item1744;

import java.util.Arrays;

/**
 * 你能在你最喜欢的那天吃到你最喜欢的糖果吗？
 * <p>
 * 给你一个下标从 0 开始的正整数数组candiesCount，其中candiesCount[i]表示你拥有的第i类糖果的数目。同时给你一个二维数组queries，其中queries[i] = [favoriteTypei, favoriteDayi, dailyCapi]。
 * <p>
 * 你按照如下规则进行一场游戏：
 * <p>
 * 你从第0天开始吃糖果。
 * 你在吃完 所有第 i - 1类糖果之前，不能吃任何一颗第 i类糖果。
 * 在吃完所有糖果之前，你必须每天 至少吃 一颗糖果。
 * 请你构建一个布尔型数组answer，满足answer.length == queries.length 。answer[i]为true的条件是：在每天吃 不超过 dailyCapi颗糖果的前提下，你可以在第favoriteDayi天吃到第favoriteTypei类糖果；否则 answer[i]为 false。注意，只要满足上面 3 条规则中的第二条规则，你就可以在同一天吃不同类型的糖果。
 * <p>
 * 请你返回得到的数组answer。
 * <p>
 * <p>
 * <p>
 * 示例 1：
 * <p>
 * 输入：candiesCount = [7,4,5,3,8], queries = [[0,2,2],[4,2,4],[2,13,1000000000]]
 * 输出：[true,false,true]
 * 提示：
 * 1- 在第 0 天吃 2 颗糖果(类型 0），第 1 天吃 2 颗糖果（类型 0），第 2 天你可以吃到类型 0 的糖果。
 * 2- 每天你最多吃 4 颗糖果。即使第 0 天吃 4 颗糖果（类型 0），第 1 天吃 4 颗糖果（类型 0 和类型 1），你也没办法在第 2 天吃到类型 4 的糖果。换言之，你没法在每天吃 4 颗糖果的限制下在第 2 天吃到第 4 类糖果。
 * 3- 如果你每天吃 1 颗糖果，你可以在第 13 天吃到类型 2 的糖果。
 * 示例 2：
 * <p>
 * 输入：candiesCount = [5,2,6,4,1], queries = [[3,1,2],[4,10,3],[3,10,100],[4,100,30],[1,3,1]]
 * 输出：[false,true,true,false,false]
 * <p>
 * <p>
 * 提示：
 * <p>
 * 1 <= candiesCount.length <= 105
 * 1 <= candiesCount[i] <= 105
 * 1 <= queries.length <= 105
 * queries[i].length == 3
 * 0 <= favoriteTypei < candiesCount.length
 * 0 <= favoriteDayi <= 109
 * 1 <= dailyCapi <= 109
 */
public class FavoriteCandy {

    public boolean[] canEat(int[] candiesCount, int[][] queries) {
        boolean[] result = new boolean[queries.length];
        for (int i = 0; i < queries.length; i++) {
            int[] item = queries[i];
            int favoriteType = item[0];
            int favoriteDay = item[1];
            int dailyCap = item[2];
            if (favoriteType == 0) {
                result[i] = favoriteDay+1 <= candiesCount[0];
                continue;
            }
            int sum = 0;
            for (int j = 0; j <= favoriteType; j++) {
                sum += candiesCount[j];
            }
            int earliestDay = (sum- candiesCount[favoriteType])/ dailyCap+1;
            int latestDay = sum - 1;
//            result[i] = (favoriteDay >= earliestDay && favoriteDay >= latestDay) && (sum + candiesCount[favoriteType] >= favoriteDay);
            result[i] = favoriteDay+1 >= earliestDay && favoriteDay+1 <= latestDay;
        }
        return result;
    }

    public static void main(String[] args) {
        FavoriteCandy favoriteCandy = new FavoriteCandy();
//        int[] candiesCount = {7, 4, 5, 3, 8};
//        int[][] queries = {{2, 13, 1000000000}, {0, 2, 2}, {4, 2, 4}};
//        System.out.println(Arrays.toString(favoriteCandy.canEat(candiesCount, queries)));
//
//        int[] candiesCount1 = {5, 2, 6, 4, 1};
//        int[][] queries1 = {{3, 1, 2}, {4, 10, 3}, {3, 10, 100}, {4, 100, 30}, {1, 3, 1}};
//        System.out.println(Arrays.toString(favoriteCandy.canEat(candiesCount1, queries1)));

//        int[] candiesCount2 = {16, 38, 8, 41, 30, 31, 14, 45, 3, 2, 24, 23, 38, 30, 31, 17, 35, 4, 9, 42, 28, 18, 37, 18, 14, 46, 11, 13, 19, 3, 5, 39, 24, 48, 20, 29, 4, 19, 36, 11, 28, 49, 38, 16, 23, 24, 4, 22, 29, 35, 45, 38, 37, 40, 2, 37, 8, 41, 33, 8, 40, 27, 13, 4, 33, 5, 8, 14, 19, 35, 31, 8, 8};
//        int[][] queries2 = {{43,1054,49},{35,669,5},{72,822,74},{47,933,94},{62,942,85},{42,596,11},{56,1066,18},{54,571,45},{39,890,100},{3,175,26},{48,1489,37},{40,447,52},{30,584,7},{26,1486,38},{21,1142,21},{9,494,96},{56,759,81},{13,319,16},{20,1406,57},{11,1092,19},{24,670,67},{38,1702,33},{5,676,32},{50,1386,77},{36,1551,87},{29,1445,13},{58,977,13},{7,887,64},{37,1396,23},{0,765,69},{40,1083,86},{48,690,92},{28,1201,56},{47,948,43},{57,233,25},{32,1293,65},{0,1646,34},{43,1467,39},{39,484,23},{21,1576,69},{12,1222,68},{9,457,83},{32,65,9},{10,1424,42},{35,534,3},{23,83,22},{33,501,33},{25,679,51},{2,321,42},{1,240,68},{7,1297,42},{45,480,72},{26,1472,9},{6,649,90},{26,361,57},{49,1592,7},{11,158,95},{35,448,24},{41,1654,10},{61,510,43},{31,1230,95},{11,1471,12},{37,43,84},{56,1147,48},{69,1368,65},{22,170,24},{56,192,80},{34,1207,69},{1,1226,22},{37,1633,50},{11,98,58},{17,125,13},{0,1490,5},{37,1732,43},{45,793,14},{16,578,72},{50,241,78}};
//
//        System.out.println(Arrays.toString(favoriteCandy.canEat(candiesCount2, queries2)));
//        int[] candiesCount3 =  {24,41,16,36,6,38,8,43,43,45,17,13,4,44,43,6,10,38,5,23,3,30,5,14,20,31,24,19,32,7,3,20,15,46,8,39,18,21,41,48,39,26,16,46,6,13,10,18,46,25,28,34,31,26,13,8,32,32,49,26,7,46,19,2,24,19,26,22,39,24,48,10,17,10,38,41,48,1,29,30,1,1,27,36,29,37,11,31,5,24,9,33,9,36,3,33,46,49,36};
//        int[][] queries3 ={{64,954,18},{58,1309,32},{15,68,20},{89,697,6},{89,1419,81},{33,1777,22},{51,677,79},{33,271,66},{6,1404,19},{85,1093,51},{77,1950,60},{22,1850,76},{89,754,100},{24,1352,98},{53,2273,75},{91,1190,13},{14,599,25},{52,1170,97},{60,801,14},{21,585,92},{92,601,35},{56,1502,62},{59,2028,10},{75,1038,96},{30,1724,29},{91,796,91},{76,1710,93},{12,681,49},{94,1450,38},{69,1574,53},{57,15,21},{79,2274,98},{51,1615,48},{66,2343,52},{16,1370,49},{37,1434,58},{88,2049,55},{92,1621,72},{38,2338,54},{73,1815,52},{10,470,11},{93,1854,76},{75,1106,56},{77,2199,42},{77,896,74},{48,873,4},{64,1050,93},{64,489,76},{12,1587,27},{84,1491,13},{35,262,66},{56,255,51},{5,132,2},{37,1863,2},{79,1098,33},{50,287,56},{77,299,56},{65,939,35},{14,1765,79},{61,2402,75},{86,2038,69},{78,1763,3},{39,466,2},{92,182,45},{65,1657,95},{74,1013,36},{75,264,5},{48,1773,68},{52,485,60},{24,862,52},{48,1831,82},{61,2367,17},{0,1233,37},{72,432,46},{36,412,34},{95,1514,61},{41,767,60},{16,178,50},{7,159,88},{41,1216,15},{21,955,40},{68,217,15},{52,2292,81},{51,688,10},{36,601,58},{62,2057,60},{42,928,71}};
//        System.out.println(Arrays.toString(favoriteCandy.canEat(candiesCount3, queries3)));
//        System.out.println(Arrays.toString(queries3[30]));
        int[] candiesCount3 =  {24,41,16,36,6,38,8,43,43,45,17,13,4,44,43,6,10,38,5,23,3,30,5,14,20,31,24,19,32,7,3,20,15,46,8,39,18,21,41,48,39,26,16,46,6,13,10,18,46,25,28,34,31,26,13,8,32,32,49,26,7,46,19,2,24,19,26,22,39,24,48,10,17,10,38,41,48,1,29,30,1,1,27,36,29,37,11,31,5,24,9,33,9,36,3,33,46,49,36};
        int[][] queries3 = {{91,796,91},{39,466,2},{58,1309,32},{15,68,20},{89,697,6},{89,1419,81},{33,1777,22},{51,677,79},{33,271,66},{6,1404,19},{85,1093,51},{77,1950,60},{22,1850,76},{89,754,100},{24,1352,98},{53,2273,75},{91,1190,13},{14,599,25},{52,1170,97},{60,801,14},{21,585,92},{92,601,35},{56,1502,62},{59,2028,10},{75,1038,96},{30,1724,29},{91,796,91},{76,1710,93},{12,681,49},{94,1450,38},{69,1574,53},{57,15,21},{64,954,18},{79,2274,98},{51,1615,48},{66,2343,52},{16,1370,49},{37,1434,58},{88,2049,55},{92,1621,72},{38,2338,54},{73,1815,52},{10,470,11},{93,1854,76},{75,1106,56},{77,2199,42},{77,896,74},{48,873,4},{64,1050,93},{64,489,76},{12,1587,27},{84,1491,13},{35,262,66},{56,255,51},{5,132,2},{37,1863,2},{79,1098,33},{50,287,56},{77,299,56},{65,939,35},{14,1765,79},{61,2402,75},{86,2038,69},{78,1763,3},{39,466,2},{92,182,45},{65,1657,95},{74,1013,36},{75,264,5},{48,1773,68},{52,485,60},{24,862,52},{48,1831,82},{61,2367,17},{0,1233,37},{72,432,46},{36,412,34},{95,1514,61},{41,767,60},{16,178,50},{7,159,88},{41,1216,15},{21,955,40},{68,217,15},{52,2292,81},{51,688,10},{36,601,58},{62,2057,60},{42,928,71}};

        System.out.println(Arrays.toString(favoriteCandy.canEat(candiesCount3, queries3)));
    }

}
